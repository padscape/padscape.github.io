{"version":3,"sources":["assets/dual-screen-1745705_1280.png","serviceWorker.js","components/navbarBtn.jsx","components/navbar.jsx","components/header.jsx","components/textPane.jsx","components/footer.jsx","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","NavbarBtn","state","link","props","content","color","id","href","this","className","getButtonClasses","Component","Navbar","buttons","type","data-toggle","data-target","map","button","key","Header","Fragment","style","fontSize","padding","viewBox","preserveAspectRatio","shapeRendering","d","x","y","fill","TextPane","first","second","alt","src","imageSrc","display","width","children","getPaneClasses","paddingBottom","renderCols","Footer","xmlns","fill-opacity","title","class","contents","text","img","coding1","ReactDOM","render","StrictMode","pane","document","getElementById","$","scroll","scrollTop","css","each","offset","top","addClass","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.aa8cf823.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dual-screen-1745705_1280.bd427603.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./navbarBtn.css\";\n\nclass NavbarBtn extends Component {\n  state = {\n    link: this.props.link,\n    content: this.props.content,\n    color: this.props.color,\n  };\n\n  render() {\n    return (\n      <li id=\"nav-item\">\n        <a href={this.state.link} className={this.getButtonClasses()}>\n          {this.state.content}\n        </a>\n      </li>\n    );\n  }\n\n  getButtonClasses() {\n    return `nav-link rounded-lg ${this.state.color ? \"nav-btn\" : \"\"}`;\n  }\n}\n\nexport default NavbarBtn;\n","import React, { Component } from \"react\";\nimport NavbarBtn from \"./navbarBtn\";\nimport \"./navbar.css\";\n\nclass Navbar extends Component {\n  state = {\n    buttons: [\n      { id: 1, link: \"./index.html\", content: \"Home\", color: false },\n      { id: 2, link: \"./login.html\", content: \"Log In\", color: true },\n      { id: 3, link: \"./signup.html\", content: \"Sign Up\", color: true },\n    ],\n  };\n\n  render() {\n    return (\n      <nav className=\"navbar navbar-expand-lg\" id=\"navbar-custom\">\n        <div className=\"container navbar-dark\">\n          <span className=\"navbar-brand\">Padscape</span>\n          <button\n            className=\"navbar-toggler\"\n            type=\"button\"\n            data-toggle=\"collapse\"\n            data-target=\"#collapse\"\n          >\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n          <div className=\"collapse navbar-collapse\" id=\"collapse\">\n            <ul className=\"navbar-nav ml-auto\">\n              {this.state.buttons.map((button) => (\n                <NavbarBtn\n                  key={button.id}\n                  link={button.link}\n                  content={button.content}\n                  color={button.color}\n                />\n              ))}\n            </ul>\n          </div>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from \"react\";\nimport \"./header.css\";\n\nclass Header extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"header\">\n          <h1\n            style={{ fontSize: \"5rem\", padding: \"15rem 1.25rem 8rem 1.25rem\" }}\n          >\n            Padscape\n          </h1>\n          <div>\n            <svg\n              className=\"waves\"\n              viewBox=\"0 24 150 28\"\n              preserveAspectRatio=\"none\"\n              shapeRendering=\"auto\"\n            >\n              <g className=\"parallax\">\n                <path\n                  d=\"M-160 44c30 0 58-18 88-18s 58 18 88 18 58-18 88-18 58 18 88 18 v44h-352z\"\n                  x=\"48\"\n                  y=\"0\"\n                  fill=\"rgba(255,255,255,0.7)\"\n                />\n                <path\n                  d=\"M-160 44c30 0 58-18 88-18s 58 18 88 18 58-18 88-18 58 18 88 18 v44h-352z\"\n                  x=\"48\"\n                  y=\"3\"\n                  fill=\"rgba(255,255,255,0.5)\"\n                />\n                <path\n                  d=\"M-160 44c30 0 58-18 88-18s 58 18 88 18 58-18 88-18 58 18 88 18 v44h-352z\"\n                  x=\"48\"\n                  y=\"5\"\n                  fill=\"rgba(255,255,255,0.3)\"\n                />\n                <path\n                  d=\"M-160 44c30 0 58-18 88-18s 58 18 88 18 58-18 88-18 58 18 88 18 v44h-352z\"\n                  x=\"48\"\n                  y=\"7\"\n                  fill=\"#fff\"\n                />\n              </g>\n            </svg>\n          </div>\n        </div>\n        <br></br>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\n\nclass TextPane extends Component {\n  renderCols() {\n    let first, second;\n\n    if (this.props.id % 2) {\n      first = (\n        <img\n          alt=\"\"\n          src={this.props.imageSrc}\n          className=\"img-fluid mx-auto\"\n          style={{ display: \"block\", width: \"80%\" }}\n        ></img>\n      );\n\n      second = this.props.children;\n    } else {\n      first = this.props.children;\n\n      second = (\n        <img\n          alt=\"\"\n          src={this.props.imageSrc}\n          className=\"img-fluid mx-auto\"\n          style={{ display: \"block\", width: \"80%\" }}\n        ></img>\n      );\n    }\n\n    const cols = (\n      <React.Fragment>\n        <div className=\"col-sm-6\">{first}</div>\n        <div className=\"col-sm-6 align-items-center pl-4\">{second}</div>\n      </React.Fragment>\n    );\n\n    return cols;\n  }\n\n  getPaneClasses() {\n    return `row no-gutters ${this.props.id > 1 ? \"slideanim\" : \"\"}`;\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className={this.getPaneClasses()} style={{ paddingBottom: 150 }}>\n          {this.renderCols()}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TextPane;\n","import React, { Component } from \"react\";\nimport \"./footer.css\";\n\nclass Footer extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <footer>\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1440 320\">\n            <path\n              fill=\"#343434\"\n              fill-opacity=\"1\"\n              d=\"M0,224L48,229.3C96,235,192,245,288,256C384,267,480,277,576,234.7C672,192,768,96,864,85.3C960,75,1056,149,1152,170.7C1248,192,1344,160,1392,144L1440,128L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z\"\n            ></path>\n          </svg>\n          <div className=\"footer\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-6\">\n                  <a\n                    style={{ color: \"#eee\" }}\n                    href=\"https://github.com/padscape/\"\n                  >\n                    GitHub\n                  </a>\n                </div>\n                <div className=\"col-6\">\n                  <a\n                    style={{ color: \"#eee\" }}\n                    href=\"https://padscape.github.io/padscape/\"\n                  >\n                    Editor\n                  </a>\n                </div>\n              </div>\n            </div>\n            <br></br>\n            <a href=\"#\" title=\"To Top\" style={{ color: \"#fff\" }}>\n              <i class=\"fas fa-angle-up\"></i>\n            </a>\n            <br></br>\n            <br></br>\n            <span>Padscape</span>\n            <br></br>\n            <br></br>\n            <br></br>\n          </div>\n        </footer>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Footer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"bootstrap/dist/js/bootstrap.js\";\nimport $ from \"jquery\";\nimport \"./index.css\";\nimport coding1 from \"./assets/dual-screen-1745705_1280.png\";\nimport Navbar from \"./components/navbar\";\nimport Header from \"./components/header\";\nimport TextPane from \"./components/textPane\";\nimport Footer from \"./components/footer\";\n\nconst contents = [\n  {\n    id: 1,\n    text: (\n      <React.Fragment>\n        <h1>Write, run, and upload your code.</h1>\n        <p>\n          Padscape is a development environment with support for HTML and\n          Python. You can use it to create test websites quickly, experiment\n          with different layouts real-time, and see others' creations.\n        </p>\n        <a\n          href=\"https://padscape.github.io/padscape/\"\n          className=\"button bg-gradient\"\n        >\n          <span>Try out the editor.</span>\n        </a>\n      </React.Fragment>\n    ),\n    img: coding1,\n  },\n  {\n    id: 2,\n    text: (\n      <React.Fragment>\n        <h1>Open Source.</h1>\n        <p>\n          Padscape is a completely open-source project hosted with GitHub (you\n          can check out the code\n          <a href=\"https://github.com/padscape/padscape\"> here</a>). This means\n          that you can see how your data is used, and you can contribute to make\n          Padscape better! Don't worry, the code is simple; I am sure that you\n          can help. Even if you are not that keen on writing code for us, you\n          can send us feature ideas or report any problems you may be facing.\n        </p>\n      </React.Fragment>\n    ),\n    img:\n      \"https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse1.mm.bing.net%2Fth%3Fid%3DOIP.dtNE8IQSVDx0zNH7JJPWBwHaHa%26pid%3DApi&f=1\",\n  },\n];\n\nReactDOM.render(\n  <React.StrictMode>\n    <Navbar />\n    <Header />\n    {contents.map((pane) => (\n      <TextPane key={pane.id} imageSrc={pane.img} id={pane.id}>\n        {pane.text}\n      </TextPane>\n    ))}\n    <Footer />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nfunction slideAnimation() {\n  $(\".slideanim\").each(function () {\n    let pos = $(this).offset().top;\n    let winTop = $(window).scrollTop();\n\n    if (pos < winTop + 800) {\n      $(this).addClass(\"slide\");\n    }\n  });\n}\n\nfunction navbarTransition() {\n  let scroll = $(window).scrollTop();\n\n  if (scroll <= 150) {\n    $(\"#navbar-custom\").css(\"box-shadow\", \"none\");\n  } else {\n    $(\"#navbar-custom\").css(\"box-shadow\", \"rgba(0, 0, 0, 0.1) 0 0 10px\");\n  }\n}\n\n$(window).scroll(() => {\n  navbarTransition();\n  slideAnimation();\n});\n\nserviceWorker.unregister();\n"],"sourceRoot":""}